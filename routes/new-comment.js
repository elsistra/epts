const path = require('path');
const multer = require('multer');
const fs = require('fs');

const storage = multer.diskStorage({});
const upload = multer({ storage });

module.exports = function (app) {
  const mongodb = require('mongodb');
  const ObjectId = mongodb.ObjectId;

  const db = app.get('db')
  const comments = db.collection("comments");

  // When the New-comment form is posted, this function will run
  app.post('/new-comment', upload.single('file'), async(req, res) =>{
    // Get the POST content from the form
    let orderId = req.body.orderId;
    let content = req.body.commentContent;
    let file = req.file;

    const date = new Date(); // Current date and time
    const year = date.getFullYear();
    const day = date.getDate(); // Unsure here
    const month = date.getMonth() + 1; // Month index is from 0 = January
    const dateString = month + '/' + day + '/' + year;

    // Ensure no fields are empty
    if (!orderId || !content) {
      console.log('A field was left empty');
    }else{
      // Manually create comment ID instead of letting it be auto-generated by database insert
      const commentId = new ObjectId();

      let fileWebPath;
      let fileFullPath;
      if (file) {
        // Get file extension
        const extname = path.extname(file.originalname)
        // Generate file web path
        fileWebPath = '/public/uploads/comments/' + commentId + extname;
        // Generate file full path
        fileFullPath = path.join(__dirname, '..' + fileWebPath);
      }

      // Insert into database
      await comments.insertOne({
        _id: commentId, // Manually set comment ID instead of letting it be auto-generated by insert
        orderId: new ObjectId(orderId),
        content: content,
        date: dateString,
        user: req.session.username,
        fileFullPath: fileFullPath,
        fileWebPath: fileWebPath
      });

      if (file) {
        await new Promise((resolve, reject) => {
          const readStream = fs.createReadStream(file.path);
          const writeStream = fs.createWriteStream(fileFullPath);
          readStream.on('error', reject);
          writeStream.on('error', reject);
          writeStream.on('finish', resolve);
          readStream.pipe(writeStream);
        });
      }

      // Send the user back to the page they were on
      res.redirect('back');
    }
  });
};
